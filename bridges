<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Ultimate Bridge Constructor</title>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/matter-js/0.19.0/matter.min.js"></script>
    <style>
        /* Estilos sin cambios */
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            background: linear-gradient(45deg, #0f0c29, #302b63);
            font-family: 'Arial Rounded MT Bold', Arial, sans-serif;
            min-height: 100vh;
            display: flex;
            justify-content: center;
            align-items: center;
            overflow: hidden;
        }

        .game-container {
            position: relative;
            width: 1200px;
            height: 700px;
            border-radius: 20px;
            overflow: hidden;
            box-shadow: 0 0 50px rgba(0, 191, 255, 0.2);
            border: 2px solid #00bfff;
            background: transparent;
        }

        #gameCanvas {
            position: absolute;
            z-index: 1;
        }

        #backgroundCanvas {
            position: absolute;
            z-index: 0;
        }

        .controls {
            position: absolute;
            top: 20px;
            left: 20px;
            background: rgba(0, 0, 0, 0.85);
            padding: 15px;
            border-radius: 15px;
            color: white;
            backdrop-filter: blur(5px);
            border: 1px solid #00bfff;
            box-shadow: 0 0 15px rgba(0, 191, 255, 0.3);
            transform: translateX(-150%);
            animation: slideIn 0.5s forwards;
            z-index: 2;
        }

        @keyframes slideIn {
            to { transform: translateX(0); }
        }

        .material-btn, #testBtn, #undoBtn, #pauseBtn, #tutorialBtn {
            padding: 10px 20px;
            margin: 8px;
            border: none;
            border-radius: 8px;
            cursor: pointer;
            transition: all 0.3s;
            background: linear-gradient(45deg, #00bfff, #0066cc);
            color: white;
            display: flex;
            align-items: center;
            gap: 8px;
        }

        .material-btn:hover, #testBtn:hover, #undoBtn:hover, #pauseBtn:hover, #tutorialBtn:hover {
            transform: translateY(-2px);
            box-shadow: 0 5px 15px rgba(0, 191, 255, 0.4);
        }

        .material-btn.active {
            background: linear-gradient(45deg, #ff6b6b, #ff0000);
        }

        #testBtn, #undoBtn, #pauseBtn, #tutorialBtn {
            background: linear-gradient(45deg, #ff4444, #cc0000);
            padding: 12px 25px;
            font-size: 1.1em;
            margin-top: 15px;
        }

        #testBtn:disabled, #undoBtn:disabled, #pauseBtn:disabled, #tutorialBtn:disabled {
            background: #666;
            cursor: not-allowed;
        }

        #budget {
            color: #00ff88;
            font-size: 1.2em;
            margin: 15px 0;
            text-shadow: 0 0 10px #00ff88;
            transition: all 0.3s;
        }

        .hud {
            position: absolute;
            top: 20px;
            right: 20px;
            color: white;
            font-size: 1.2em;
            text-shadow: 0 0 10px #00bfff;
            background: rgba(0, 0, 0, 0.7);
            padding: 15px;
            border-radius: 15px;
            border: 1px solid #00bfff;
            z-index: 2;
        }

        #difficultySelect {
            padding: 8px;
            margin: 8px;
            border-radius: 8px;
            background: #333;
            color: white;
            border: 1px solid #00bfff;
        }
    </style>
</head>
<body>
    <div class="game-container">
        <canvas id="backgroundCanvas" width="1200" height="700"></canvas>
        <canvas id="gameCanvas" width="1200" height="700"></canvas>
        <div class="controls">
            <div id="budget">üí∞ Presupuesto: $15,000</div>
            <button class="material-btn active" data-material="wood">
                <span>üå≥</span> Madera ($20/m)
            </button>
            <button class="material-btn" data-material="steel">
                <span>üî©</span> Acero ($40/m)
            </button>
            <button class="material-btn" data-material="cable">
                <span>‚õì</span> Cable ($10/m)
            </button>
            <select id="difficultySelect">
                <option value="easy">F√°cil</option>
                <option value="medium" selected>Medio</option>
                <option value="hard">Dif√≠cil</option>
            </select>
            <button id="testBtn">üöó Probar Puente</button>
            <button id="undoBtn">‚Ü∫ Retroceder</button>
            <button id="pauseBtn">‚è∏ Pausa</button>
            <button id="tutorialBtn">‚Ñπ Tutorial</button>
        </div>
        <div class="hud">
            <div>üöß Vigas: <span id="beamsUsed">0</span></div>
            <div>üéØ Intentos: <span id="attempts">1</span></div>
            <div>üèÜ Puntos: <span id="score">0</span></div>
            <div>‚è± Tiempo: <span id="timer">0.0s</span></div>
            <div id="status"></div>
        </div>
    </div>

    <script>
        const { Engine, Render, World, Bodies, Body, Composite, Constraint, Events } = Matter;
        const engine = Engine.create({
            gravity: { y: 1.0, scale: 0.001 } // Gravedad m√°s realista
        });

        const canvas = document.getElementById('gameCanvas');
        const ctx = canvas.getContext('2d');
        const bgCanvas = document.getElementById('backgroundCanvas');
        const bgCtx = bgCanvas.getContext('2d');

        // Variables del juego
        let currentMaterial = 'wood';
        let budget = 15000;
        let beamsUsed = 0;
        let attempts = 1;
        let score = 0;
        let isBuilding = true;
        let isPaused = false;
        let currentBeam = null;
        let car = null;
        let startingBodyRef = null;
        let beams = [];
        let testStartTime = null;

        // Configuraci√≥n de materiales m√°s realista
        const materials = {
            wood: { 
                color: '#8B4513', 
                density: 0.008, 
                cost: 20, 
                stiffness: 0.2, 
                maxLength: 150,
                friction: 0.3,
                restitution: 0.1
            },
            steel: { 
                color: '#808080', 
                density: 0.078, 
                cost: 40, 
                stiffness: 0.9, 
                maxLength: 250,
                friction: 0.2,
                restitution: 0.05
            },
            cable: { 
                color: '#FFD700', 
                density: 0.002, 
                cost: 10, 
                stiffness: 0.8, 
                maxLength: 300, 
                isCable: true,
                friction: 0.1,
                restitution: 0.2
            }
        };

        // Sonidos
        const buildSound = new Audio('build.mp3');
        const testSound = new Audio('test.mp3');

        // Sistema de renderizado
        const render = Render.create({
            canvas: canvas,
            engine: engine,
            options: {
                width: 1200,
                height: 700,
                wireframes: false,
                background: 'transparent'
            }
        });

        // Elementos del mundo
        const anchors = [
            Bodies.rectangle(200, 400, 200, 20, { 
                isStatic: true, 
                friction: 0.5,
                render: { fillStyle: '#666', strokeStyle: '#000', lineWidth: 2 }
            }),
            Bodies.rectangle(1000, 400, 200, 20, { 
                isStatic: true, 
                friction: 0.5,
                render: { fillStyle: '#666', strokeStyle: '#000', lineWidth: 2 }
            })
        ];

        const ground = Bodies.rectangle(600, 695, 1200, 10, { 
            isStatic: true,
            friction: 0.5,
            render: { visible: false }
        });

        const water = Bodies.rectangle(600, 650, 1200, 100, {
            isStatic: true,
            isSensor: true,
            render: { visible: false }
        });

        World.add(engine.world, [...anchors, ground, water]);

        // Fondo con carreteras
        function drawBackground() {
            bgCtx.fillStyle = '#87CEEB';
            bgCtx.fillRect(0, 0, bgCanvas.width, bgCanvas.height * 0.6);
            bgCtx.fillStyle = '#8B4513';
            bgCtx.fillRect(0, bgCanvas.height * 0.6, bgCanvas.width, bgCanvas.height * 0.4);
            bgCtx.fillStyle = '#4682B4';
            bgCtx.fillRect(300, 420, 600, 280);
            bgCtx.fillStyle = '#333';
            bgCtx.fillRect(0, 400, 300, 20);
            bgCtx.fillRect(900, 400, 300, 20);
            bgCtx.strokeStyle = '#FFF';
            bgCtx.lineWidth = 2;
            bgCtx.beginPath();
            bgCtx.setLineDash([10, 10]);
            bgCtx.moveTo(0, 410);
            bgCtx.lineTo(300, 410);
            bgCtx.moveTo(900, 410);
            bgCtx.lineTo(1200, 410);
            bgCtx.stroke();
            bgCtx.setLineDash([]);
        }

        // Sistema de construcci√≥n
        let isDrawing = false;
        let startPoint = null;

        canvas.addEventListener('mousedown', e => {
            if (!isBuilding || budget <= 0 || isPaused) return;
            const mousePos = getMousePos(e);
            if (canBuildFrom(mousePos)) {
                isDrawing = true;
                startPoint = mousePos;
                startingBodyRef = getBodyAtPosition(mousePos);
            }
        });

        canvas.addEventListener('mousemove', e => {
            if (!isDrawing) return;
            const mousePos = getMousePos(e);
            drawTempBeam(startPoint, mousePos);
        });

        canvas.addEventListener('mouseup', e => {
            if (!isDrawing) return;
            isDrawing = false;
            const endPoint = getMousePos(e);
            createBeam(startPoint, endPoint);
            startPoint = null;
            startingBodyRef = null;
            if (currentBeam) {
                World.remove(engine.world, currentBeam);
                currentBeam = null;
            }
        });

        function getMousePos(e) {
            const rect = canvas.getBoundingClientRect();
            return {
                x: (e.clientX - rect.left) * (canvas.width / rect.width),
                y: (e.clientY - rect.top) * (canvas.height / rect.height)
            };
        }

        function canBuildFrom(pos) {
            const bodies = Composite.allBodies(engine.world);
            return bodies.some(body => (
                body !== ground && body !== water && Matter.Bounds.contains(body.bounds, pos)
            ));
        }

        function getBodyAtPosition(pos) {
            const bodies = Composite.allBodies(engine.world);
            return bodies.find(body => (
                body !== ground && body !== water && Matter.Bounds.contains(body.bounds, pos)
            ));
        }

        function drawTempBeam(start, end) {
            if (currentBeam) World.remove(engine.world, currentBeam);
            const length = Math.hypot(end.x - start.x, end.y - start.y);
            const material = materials[currentMaterial];
            if (length > material.maxLength || length < 20) return;
            
            currentBeam = Bodies.rectangle(
                (start.x + end.x) / 2,
                (start.y + end.y) / 2,
                length,
                material.isCable ? 3 : 10,
                {
                    angle: Math.atan2(end.y - start.y, end.x - start.x),
                    render: { fillStyle: material.color, strokeStyle: '#000', lineWidth: 2 },
                    isStatic: true
                }
            );
            World.add(engine.world, currentBeam);
        }

        function createBeam(start, end) {
            const material = materials[currentMaterial];
            const length = Math.hypot(end.x - start.x, end.y - start.y);
            const cost = Math.round(length * material.cost);
            
            if (budget < cost || length < 20 || length > material.maxLength || !startingBodyRef) return;

            budget -= cost;
            beamsUsed++;
            document.getElementById('budget').textContent = `üí∞ Presupuesto: $${budget}`;
            document.getElementById('beamsUsed').textContent = beamsUsed;

            const beam = Bodies.rectangle(
                (start.x + end.x) / 2,
                (start.y + end.y) / 2,
                length,
                material.isCable ? 3 : 10,
                {
                    angle: Math.atan2(end.y - start.y, end.x - start.x),
                    density: material.density,
                    friction: material.friction,
                    restitution: material.restitution,
                    frictionAir: 0.01,
                    render: { fillStyle: material.color, strokeStyle: '#000', lineWidth: 2 }
                }
            );

            World.add(engine.world, beam);

            const startBodyAngle = startingBodyRef.angle || 0;
            const cosA = Math.cos(-startBodyAngle);
            const sinA = Math.sin(-startBodyAngle);
            const dx = start.x - startingBodyRef.position.x;
            const dy = start.y - startingBodyRef.position.y;
            const localX = dx * cosA - dy * sinA;
            const localY = dx * sinA + dy * cosA;

            const constraintStart = Constraint.create({
                bodyA: startingBodyRef,
                pointA: { x: localX, y: localY },
                bodyB: beam,
                pointB: { x: -length / 2, y: 0 },
                stiffness: material.stiffness,
                length: 0,
                render: { visible: false }
            });

            World.add(engine.world, constraintStart);

            const endBody = getBodyAtPosition(end);
            let constraintEnd = null;
            if (endBody && endBody !== beam && endBody !== startingBodyRef) {
                const endBodyAngle = endBody.angle || 0;
                const cosB = Math.cos(-endBodyAngle);
                const sinB = Math.sin(-endBodyAngle);
                const dxEnd = end.x - endBody.position.x;
                const dyEnd = end.y - endBody.position.y;
                const localXEnd = dxEnd * cosB - dyEnd * sinB;
                const localYEnd = dxEnd * sinB + dyEnd * cosB;

                constraintEnd = Constraint.create({
                    bodyA: beam,
                    pointA: { x: length / 2, y: 0 },
                    bodyB: endBody,
                    pointB: { x: localXEnd, y: localYEnd },
                    stiffness: material.stiffness,
                    length: 0,
                    render: { visible: false }
                });

                World.add(engine.world, constraintEnd);
            }

            beams.push({
                beam: beam,
                constraints: [constraintStart, constraintEnd].filter(c => c),
                cost: cost
            });

            buildSound.play();
            canvas.style.filter = 'brightness(1.2)';
            setTimeout(() => canvas.style.filter = 'none', 100);
        }

        function testBridge() {
            if (budget > 0 && !confirm('¬øContinuar con la prueba?')) return;
            
            isBuilding = false;
            document.getElementById('testBtn').disabled = true;
            document.getElementById('undoBtn').disabled = true;
            document.getElementById('pauseBtn').disabled = true;

            car = Bodies.rectangle(50, 350, 80, 40, {
                density: 0.03, // M√°s realista
                friction: 0.5,
                restitution: 0.2,
                frictionAir: 0.01,
                render: {
                    sprite: {
                        texture: 'coche.png',
                        xScale: 0.07,
                        yScale: 0.07
                    }
                }
            });
            
            World.add(engine.world, car);
            Body.setVelocity(car, { x: 20, y: 0 });

            testSound.play();
            testStartTime = Date.now();

            let cameraX = 0;
            function updateCamera() {
                if (!car) return;
                cameraX = lerp(cameraX, car.position.x - 600, 0.1);
                render.bounds.min.x = cameraX;
                render.bounds.max.x = cameraX + 1200;
                if (isBuilding) return;
                updateTimer();
                requestAnimationFrame(updateCamera);
            }

            function updateTimer() {
                if (!testStartTime || isBuilding) return;
                const elapsed = (Date.now() - testStartTime) / 1000;
                document.getElementById('timer').textContent = `${elapsed.toFixed(1)}s`;
            }

            function checkBridge() {
                if (!car) return;
                if (car.position.x > 1150) {
                    handleSuccess();
                } else {
                    setTimeout(checkBridge, 50);
                }
            }

            Events.on(engine, 'collisionStart', (event) => {
                const pairs = event.pairs;
                for (let i = 0; i < pairs.length; i++) {
                    const pair = pairs[i];
                    if ((pair.bodyA === car && pair.bodyB === water) || 
                        (pair.bodyB === car && pair.bodyA === water)) {
                        handleWaterFailure();
                    }
                }
            });

            updateCamera();
            checkBridge();
        }

        function handleSuccess() {
            const timeTaken = (Date.now() - testStartTime) / 1000;
            const timeBonus = Math.max(0, (5 - timeTaken)) * 1000;
            const stabilityBonus = Math.max(0, 20 - beamsUsed) * 50;
            score += budget + beamsUsed * 100 + timeBonus + stabilityBonus;
            document.getElementById('score').textContent = score;
            document.getElementById('status').textContent = '¬°Puente Estable!';
            alert(`¬°√âxito! Puntos: ${score}\nTiempo: ${timeTaken.toFixed(1)}s\nBono Tiempo: ${timeBonus}\nBono Estabilidad: ${stabilityBonus}`);
            resetGame(true);
        }

        function handleWaterFailure() {
            if (!car) return;
            World.remove(engine.world, car);
            car = null;
            score = Math.max(0, score - 1000);
            document.getElementById('score').textContent = score;
            document.getElementById('status').textContent = '';
            alert('¬°El coche cay√≥ al agua! -1000 puntos');
            createSplashParticles();
            resetGame(false);
        }

        function createSplashParticles() {
            for (let i = 0; i < 30; i++) {
                const particle = Bodies.circle(600, 650, 2, {
                    render: { fillStyle: '#4682B4' },
                    isStatic: false,
                    velocity: { x: (Math.random() - 0.5) * 15, y: -Math.random() * 10 }
                });
                World.add(engine.world, particle);
                setTimeout(() => World.remove(engine.world, particle), 500);
            }
        }

        function resetGame(success) {
            World.clear(engine.world);
            World.add(engine.world, [...anchors, ground, water]);
            
            attempts = 1;
            budget = success ? getDifficultyBudget() : Math.max(5000, budget * 0.7);
            beamsUsed = 0;
            isBuilding = true;
            isPaused = false;
            car = null;
            beams = [];
            testStartTime = null;

            if (!success && score <= 0) {
                alert('¬°Juego terminado! Puntuaci√≥n final: ' + score);
                score = 0;
                budget = getDifficultyBudget();
            }
            
            document.getElementById('budget').textContent = `üí∞ Presupuesto: $${budget}`;
            document.getElementById('beamsUsed').textContent = beamsUsed;
            document.getElementById('attempts').textContent = attempts;
            document.getElementById('timer').textContent = '0.0s';
            document.getElementById('status').textContent = '';
            document.getElementById('testBtn').disabled = false;
            document.getElementById('undoBtn').disabled = false;
            document.getElementById('pauseBtn').disabled = false;
            document.getElementById('pauseBtn').textContent = '‚è∏ Pausa';
        }

        function undoLastBeam() {
            if (!isBuilding || beams.length === 0 || isPaused) return;
            
            const lastBeam = beams.pop();
            World.remove(engine.world, lastBeam.beam);
            lastBeam.constraints.forEach(constraint => World.remove(engine.world, constraint));
            
            budget += lastBeam.cost;
            beamsUsed--;
            document.getElementById('budget').textContent = `üí∞ Presupuesto: $${budget}`;
            document.getElementById('beamsUsed').textContent = beamsUsed;
        }

        function togglePause() {
            if (!isBuilding) return;
            isPaused = !isPaused;
            document.getElementById('pauseBtn').textContent = isPaused ? '‚ñ∂ Reanudar' : '‚è∏ Pausa';
            document.getElementById('status').textContent = isPaused ? 'Pausa' : '';
        }

        function showTutorial() {
            alert('Bienvenido a Ultimate Bridge Constructor!\n\n' +
                  '1. Haz clic y arrastra desde una carretera o viga para construir.\n' +
                  '2. Usa madera ($20/m), acero ($40/m) o cables ($10/m).\n' +
                  '3. ¬°Refuerza bien! Solo tienes un intento.\n' +
                  '4. Si el coche cae al agua, pierdes.\n' +
                  '5. Presiona "Probar Puente" para enviar el coche.\n' +
                  '6. Usa "Retroceder" si te equivocas.\n' +
                  '7. ¬°Gana puntos por presupuesto, estabilidad y tiempo!');
        }

        function getDifficultyBudget() {
            const difficulty = document.getElementById('difficultySelect').value;
            switch (difficulty) {
                case 'easy': engine.gravity.y = 0.8; return 15000;
                case 'medium': engine.gravity.y = 1.0; return 12000;
                case 'hard': engine.gravity.y = 1.2; return 10000;
                default: return 12000;
            }
        }

        function lerp(a, b, t) {
            return a + (b - a) * t;
        }

        // Inicializaci√≥n
        Events.on(render, 'beforeRender', () => {
            drawBackground();
        });

        document.querySelectorAll('.material-btn').forEach(btn => {
            btn.addEventListener('click', () => {
                document.querySelectorAll('.material-btn').forEach(b => b.classList.remove('active'));
                btn.classList.add('active');
                currentMaterial = btn.dataset.material;
            });
        });

        document.getElementById('difficultySelect').addEventListener('change', () => {
            budget = getDifficultyBudget();
            document.getElementById('budget').textContent = `üí∞ Presupuesto: $${budget}`;
        });

        document.getElementById('testBtn').addEventListener('click', testBridge);
        document.getElementById('undoBtn').addEventListener('click', undoLastBeam);
        document.getElementById('pauseBtn').addEventListener('click', togglePause);
        document.getElementById('tutorialBtn').addEventListener('click', showTutorial);

        Engine.run(engine);
        Render.run(render);
        drawBackground();
    </script>
</body>
</html>
